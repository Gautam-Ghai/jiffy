// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id                Int @default(autoincrement()) @id
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  likesCount        Int @default(0)
  commentsCount     Int @default(0)
  viewsCount        Int @default(0)
  sharesCount       Int @default(0)
  video             String
  game              GameType @default(Valorant)
  authorId          Int
  author            User @relation("Author", fields: [authorId], references: [id])
  likedBy           User[] @relation("UserLikedPost", references: [id])
  savedBy           User[] @relation("UserSavedPost", references: [id])
  comments          Comment[] @relation("PostHasComment")
}

model User {
  id                Int @default(autoincrement()) @id
  name              String @unique
  email             String @unique
  emailVerified     DateTime?
  accounts          Account[]
  sessions          Session[]
  image             String?
  website           String?
  description       String?
  createdAt         DateTime @default(now())
  postsCount        Int @default(0)
  viewsCount        Int @default(0)
  followersCount    Int @default(0)
  followingCount    Int @default(0)
  posts             Post[] @relation("Author")
  likedPosts        Post[] @relation("UserLikedPost")
  savedPosts        Post[] @relation("UserSavedPost")
  comments          Comment[] @relation("UserComment")
  likedComments     Comment[] @relation("UserLikesComment")
}

model Comment {
  id                Int @default(autoincrement()) @id
  content           String
  createdAt         DateTime @default(now())
  post              Post @relation("PostHasComment", fields: [postId], references: [id])
  postId            Int
  parentComment     Comment? @relation("CommentParentsComment", fields: [parentCommentId], references: [id])
  parentCommentId   Int?
  childComments     Comment[] @relation("CommentParentsComment")
  author            User @relation("UserComment", fields: [authorId], references: [id])
  authorId          Int
  likedBy           User[] @relation("UserLikesComment", references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
enum GameType {
  Valorant
  LeagueOfLegends
  RocketLeague
  ApexLegends
}