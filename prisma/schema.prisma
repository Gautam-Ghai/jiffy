// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int @default(autoincrement()) @id
  name              String @unique
  email             String @unique
  emailVerified     DateTime?
  accounts          Account[]
  sessions          Session[]
  image             String?
  createdAt         DateTime @default(now())
  profileImage      String?
  bannerImage       String?
  bannerImageId     String?
  website           String?
  description       String?
  posts             Post[] @relation("Author")
  likedPosts        Post[] @relation("UserLikedPost")
  savedPosts        Post[] @relation("UserSavedPost")
  comments          Comment[] @relation("UserComment")
  likedComments     Comment[] @relation("UserLikesComment")
  followers         Follows[] @relation("follower")
  following         Follows[] @relation("following")
}

model Game {
  id                Int @default(autoincrement()) @id
  name              String @unique
  releaseDate       String?
  genre             Genre @default(Action)
  logoImage         String?
  profileImage      String?
  coverImage        String?
  coverVideo        String?
  posts             Post[] @relation(name: "LinkedGame")
}

enum Genre {
  First_Person_Shooter
  Third_Person_Shooter
  Sandbox
  Real_Time_Strategy
  Multiplayer_Online_Battle_Arena
  Role_Playing
  Simulation
  Sports
  Puzzle
  Survival
  Horror
  Action
  Adventture
  Battle_Royale
}

model Post {
  id                Int @default(autoincrement()) @id
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  title             String
  description       String?
  url               String
  publicId          String
  gameId            Int
  game              Game @relation("LinkedGame", fields: [gameId], references: [id])
  authorId          Int
  author            User @relation("Author", fields: [authorId], references: [id])
  likedBy           User[] @relation("UserLikedPost", references: [id])
  savedBy           User[] @relation("UserSavedPost", references: [id])
  comments          Comment[] @relation("PostHasComment")
}

model Comment {
  id                Int @default(autoincrement()) @id
  content           String
  createdAt         DateTime @default(now())
  post              Post @relation("PostHasComment", fields: [postId], references: [id])
  postId            Int
  author            User @relation("UserComment", fields: [authorId], references: [id])
  authorId          Int
  likedBy           User[] @relation("UserLikesComment", references: [id])
  
  // parentComment     Comment? @relation("CommentParentsComment", fields: [parentCommentId], references: [id])
  // parentCommentId   Int?
  // childComments     Comment[] @relation("CommentParentsComment")
}

model Follows {
  follower          User @relation("follower", fields: [followerId], references: [id])
  followerId        Int
  following         User @relation("following", fields: [followingId], references: [id])
  followingId       Int

  @@id([followerId, followingId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}